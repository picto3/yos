import("names.rr")$
module sm1;
localf reduction_verbose;
#define    SM1L_FIND_PROC(P)  P = getopt(proc);\
                          if (type(P) == -1) {\
                             P = find_proc();\
                          }
def reduction_verbose(A) 
"reduction_verbose([F,G,V,Weight]) returns [R,R0,S,G,LT,Ord] where R*R0+S*G=0 and LT is the initial of R with the Order"
{
  /* Example: reduction(A|proc=10) */
  SM1L_FIND_PROC(P);
  /* check the arguments */
  if (type(A) != 4) {
   error("sm1. reduction(A|proc=p): A must be a list.");
  }
  if (length(A) == 2) return mod_reduction(A | option_list=getopt());
  if (type(A[0]) != 4) {
    AA = [rtostr(A[0])];
    AA = append(AA,[ map(rtostr,A[1]) ]);
  }else{ // module case
    AA = [map(rtostr,A[0])];
    B=[];
    for (I=0; I<length(A[1]); I++) {
      B=cons(map(rtostr,A[1][I]),B);
    }
    AA = append(AA,[reverse(B)]);
  }
  AA = append(AA, cdr(cdr(A)));
/*  printf("AA=%a\n",AA);
  print(map(type,AA[0]));
  print(map(type,AA[2]));
  print(map(type,AA[3][0])); */
  sm1(P," /reduction*.noH 0 def ");
  push_int0(P,AA);
  sm1(P," reduction* /tmp-reduction set tmp-reduction getRing :: tmp-reduction ");
  ox_check_errors2(P);
  Ans = pop(P);  /* Throw away Ans[3] */
  sm1(P," tmp-reduction 0 get init /tmp-reduction-init set tmp-reduction-init ");
  Ans2 = pop(P);
  sm1(P," tmp-reduction getRing (oxRingStructure) data_conversion ");
  Ans3 = pop(P);
  return([Ans[0],Ans[1],Ans[2],A[1],Ans2,Ans3]);
}
endmodule;

/*
XM_debug=0$
F=[x^2+y^2-4,x*y-1]$

sm1.auto_reduce(1)$
Weight_vec=[[x,10,y,1]]$
G=sm1.gb([F,[x,y],Weight_vec]);
S=sm1.syz([G[0],[x,y],Weight_vec]);

R=sm1.reduction_verbose([FF=x*F[0]-y*F[1],G[0],[x,y],Weight_vec])$
// check if it is zero
FF*R[1]+(R[2][0]*G[0][0]+R[2][1]*G[0][1]);

//Sig=sm1.reduction([R[2],S[0],[x,y],Weight_vec]);  --> error why?
Ans=sm1.reduction_verbose([R[2],S[0],[x,y],Weight_vec])$
Sig=Ans[4];  // initial
Sig_order=Ans[5]; // order str
Sig_rep=[Ans[0],Ans[1]]; // representation
*/

end$